enum Timeframe {
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

enum Fee {
  DEFAULT
}

enum PoolTemplate {
  CONSTANT_PRODUCT
  HYBRID
  INDEX
  CONCENTRATED_LIQUDITY
}

enum Tracking {
  TRACKED
  UNTRACKED
}

enum Untracked {
  LOW_LIQUDITY
  INVALID_TOKEN
}

interface History {
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  transactionCount: BigInt!
  timeframe: Timeframe!
}

interface Factory {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  transactionCount: BigInt!
  poolCount: BigInt!
}

interface Pool {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [Token!]!
  reserves: [BigDecimal!]!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  data: Bytes!
}

type MasterDeployer @entity {
  id: ID!
  pendingOwner: Bytes!
  previousOwner: Bytes!
  owner: Bytes!
  migrator: Bytes!
  barFee: BigInt!
  barFeeTo: Bytes!
  bento: Bytes!
  factories: [Factory!]! @derivedFrom(field: "masterDeployer")
  factoryCount: BigInt!  
  pools: [Pool!]! @derivedFrom(field: "masterDeployer")
  poolCount: BigInt!
}

type WhitelistedFactory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
}

type ConstantProductPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
}

type ConstantProductPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  assets: [Token!]!
  reserves: [BigDecimal!]!
  swapFee: BigInt!
  twapEnabled: Boolean!
  data: Bytes!
}

type ConcentratedLiquidityPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
}

type ConcentratedLiquidityPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  reserve0: BigDecimal!
  reserve1: BigDecimal!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  assets: [Token!]!
  reserves: [BigDecimal!]!
  data: Bytes!
}

type HybridPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
}

type HybridPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  token0PrecisionMultiplier: BigInt!
  token1PrecisionMultiplier: BigInt!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  assets: [Token!]!
  reserves: [BigDecimal!]!
  data: Bytes!
}

type IndexPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
}

type IndexPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  assets: [Token!]!
  reserves: [BigDecimal!]!
  data: Bytes!
}

type Token @entity {
  id: ID!
  metaData: TokenMetaData! 
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  transactionCount: BigInt!
}

type TokenMetaData @entity {
  id: ID!
  token: Token!
  symbol: String!
  symbolSuccess: Boolean!
  name: String!
  nameSuccess: Boolean!
  decimals: BigInt!
  decimalsSuccess: Boolean!
}

type Mint @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  token0: Token!
  token1: Token!
  amount: BigInt!
  amount0: BigDecimal!
  amount1: BigDecimal!
  sender: Bytes!
  recipient: Bytes!
  logIndex: BigInt!
}

type Burn @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  token0: Token!
  token1: Token!
  amount: BigInt!
  amount0: BigDecimal!
  amount1: BigDecimal!
  sender: Bytes!
  recipient: Bytes!
  logIndex: BigInt!
}

type Swap @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  tokenIn: Token!
  tokenOut: Token!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  recipient: Bytes!
  logIndex: BigInt!
}

type Transaction @entity {
  id: ID!
  gasUsed: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
  block: BigInt!
  timestamp: BigInt!
}
