# enum Fee {
#   DEFAULT
# }

# enum PoolTemplate {
#   CONSTANT_PRODUCT
#   HYBRID
#   INDEX
#   CONCENTRATED_LIQUDITY
# }

# enum Tracking {
#   TRACKED
#   UNTRACKED
# }

# enum Untracked {
#   LOW_LIQUDITY
#   INVALID_TOKEN
# }

interface Factory {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  transactionCount: BigInt!
  poolCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type MasterDeployer @entity {
  id: ID!
  pendingOwner: Bytes!
  previousOwner: Bytes!
  owner: Bytes!
  migrator: Bytes!
  barFee: BigInt!
  barFeeTo: Bytes!
  bento: Bytes!
  factories: [Factory!]! @derivedFrom(field: "masterDeployer")
  factoryCount: BigInt!  
  pools: [Pool!]! @derivedFrom(field: "masterDeployer")
  poolCount: BigInt!
}

type WhitelistedFactory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
}

type WhitelistedPool @entity {
  id: ID!
  price: TokenPrice!
  pool: Pool!
}

type StablePool @entity {
  # NATIVE:STABLE
  id: ID!
  pool: Pool!
}

type Bundle @entity {
  id: ID!
  price: BigDecimal!
}

interface FactoryKpi {
  id: ID!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  poolCount: BigInt!
  transactionCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type ConstantProductPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  poolCount: BigInt!
  transactionCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

interface Pool {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
  kpi: PoolKpi!
  block: BigInt!
  timestamp: BigInt!
}

interface PoolAsset {
  id: ID!
  pool: Pool!
  token: Token!
  reserve: BigDecimal!
  # Price in terms of the pool
  price: BigDecimal!
}

type ConstantProductPoolAsset implements PoolAsset @entity {
  id: ID!
  pool: Pool!
  token: Token!
  reserve: BigDecimal!
  price: BigDecimal!
}

interface PoolKpi {
  id: ID!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type ConstantProductPoolKpi implements PoolKpi @entity {
  id: ID!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  totalSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type ConstantProductPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
  kpi: PoolKpi!
  swapFee: BigInt!
  twapEnabled: Boolean!
  block: BigInt!
  timestamp: BigInt!
}

type ConcentratedLiquidityPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
}

type ConcentratedLiquidityPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
  kpi: PoolKpi!
  block: BigInt!
  timestamp: BigInt!
}

type ConcentratedLiquidityPoolKpi implements PoolKpi @entity {
  id: ID!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  totalSupply: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type HybridPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  block: BigInt!
  timestamp: BigInt!
}

type HybridPoolAsset implements PoolAsset @entity {
  id: ID!
  pool: Pool!
  token: Token!
  precisionMultiplier: BigInt!
  reserve: BigDecimal!
  price: BigDecimal!
}

type HybridPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
  kpi: PoolKpi!
  block: BigInt!
  timestamp: BigInt!
}

type IndexPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  poolCount: BigInt!
  transactionCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type IndexPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  assets: [PoolAsset!]! @derivedFrom(field: "pool")
  kpi: PoolKpi!
  block: BigInt!
  timestamp: BigInt!
}

type Transaction @entity {
  id: ID!
  gasUsed: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
  collects: [Collect!]! @derivedFrom(field: "transaction")
  block: BigInt!
  timestamp: BigInt!
}

type Mint @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  token0: Token!
  token1: Token!
  amount: BigInt!
  amount0: BigDecimal!
  amount1: BigDecimal!
  sender: Bytes!
  recipient: Bytes!
  origin: Bytes!
  logIndex: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Burn @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  token0: Token!
  token1: Token!
  amount: BigInt!
  amount0: BigDecimal!
  amount1: BigDecimal!
  sender: Bytes!
  recipient: Bytes!
  origin: Bytes!
  logIndex: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Swap @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  tokenIn: Token!
  tokenOut: Token!
  amountIn: BigDecimal!
  amountOut: BigDecimal!
  sender: Bytes!
  recipient: Bytes!
  origin: Bytes!
  logIndex: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Collect @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
  logIndex: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type Token @entity {
  id: ID!
  kpi: TokenKpi!
  symbol: String!
  symbolSuccess: Boolean!
  name: String!
  nameSuccess: Boolean!
  decimals: BigInt!
  decimalsSuccess: Boolean!
  block: BigInt!
  timestamp: BigInt!
}

type TokenKpi @entity {
  id: ID!
  token: Token!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
  block: BigInt!
  timestamp: BigInt!
}

type TokenPrice @entity {
  id: ID!
  # preferredPool: Pool!
  token: Token!
  derivedNative: BigDecimal!
  derivedUSD: BigDecimal!
  whitelistedPoolCount: BigInt!
  whitelistedPools: [WhitelistedPool!]! @derivedFrom(field: "price")
}

interface Bucket {
  id: ID!
  date: Int!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
}

type PoolHourBucket implements Bucket @entity {
  id: ID!
  date: Int!
  pool: Pool!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
}

type PoolDayBucket implements Bucket @entity {
  id: ID!
  date: Int!
  pool: Pool!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
}

type TokenHourBucket implements Bucket @entity {
  id: ID!
  date: Int!
  token: Token!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
}

type TokenDayBucket implements Bucket @entity {
  id: ID!
  date: Int!
  token: Token!
  totalValueLocked: BigDecimal!
  totalValueLockedUSD: BigDecimal!
  volume: BigDecimal!
  volumeUSD: BigDecimal!
  fees: BigDecimal!
  feesUSD: BigDecimal!
  transactionCount: BigInt!
}