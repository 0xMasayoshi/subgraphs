enum Fee {
  DEFAULT
}

interface Factory {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
}

interface Pool {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
}

type MasterDeployer @entity {
  id: ID!
  owner: Bytes!
  migrator: Bytes!
  barFee: BigInt!
  factories: [Factory!]! @derivedFrom(field: "masterDeployer")
  factoryCount: BigInt!
  pools: [Pool!]! @derivedFrom(field: "masterDeployer")
  poolCount: BigInt!
}

type ConstantProductPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
}

type ConstantProductPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  volume: BigDecimal!
}

type HybridPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
}

type HybridPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  token0PrecisionMultiplier: BigInt!
  token1PrecisionMultiplier: BigInt!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  volume: BigDecimal!
}

type IndexPoolFactory implements Factory @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  pools: [Pool!]! @derivedFrom(field: "factory")
  poolCount: BigInt!
}

type IndexPool implements Pool @entity {
  id: ID!
  masterDeployer: MasterDeployer!
  factory: Factory!
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
  totalSupply: BigInt!
  transactionCount: BigInt!
  totalValueLocked: BigDecimal!
  volume: BigDecimal!
}

type Price @entity {
  id: ID!
  priceUSD: BigDecimal!
}

type Token @entity {
  id: ID!
  symbol: String!
  name: String!
  decimals: BigInt!
}

type Mint @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
}
type Burn @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
}
type Swap @entity {
  id: ID!
  pool: Pool!
  transaction: Transaction!
}

type Transaction @entity {
  id: ID!
  block: BigInt!
  timestamp: BigInt!
  gasUsed: BigInt!
  gasLimit: BigInt!
  gasPrice: BigInt!
  mints: [Mint!]! @derivedFrom(field: "transaction")
  burns: [Burn!]! @derivedFrom(field: "transaction")
  swaps: [Swap!]! @derivedFrom(field: "transaction")
}